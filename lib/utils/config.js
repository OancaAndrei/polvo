// Generated by CoffeeScript 1.10.0
var argv, config, config_contents, config_path, debug, dirs, error, fs, info, parse_config, path, ref, upath, util, warn, yaml;

path = require('path');

upath = require('upath');

fs = require('fs');

util = require('util');

yaml = require('js-yaml');

dirs = require('./dirs');

argv = require('../cli').argv;

ref = require('./logger')('utils/config'), error = ref.error, warn = ref.warn, info = ref.info, debug = ref.debug;

if (dirs.pwd != null) {
  if (argv['config-file'] != null) {
    config_path = upath.join(dirs.pwd, argv['config-file']);
  } else {
    config_path = upath.join(dirs.pwd, "polvo.yml");
  }
}

if (fs.existsSync(config_path)) {
  if (fs.statSync(config_path).isDirectory()) {
    error('Config file\'s path is a directory  ~>', config_path);
  } else {
    config_contents = fs.readFileSync(config_path, 'utf8');
    config = yaml.safeLoad(config_contents) || {};
  }
} else {
  error('Config file not found ~>', config_path);
}

parse_config = function() {
  var abs_location, all, base, dirpath, i, index, key, len, location, name, ref1, ref2, reg, res, root, tmp;
  if (config.server != null) {
    if ((base = config.server).port == null) {
      base.port = 3000;
    }
    if (config.server.root) {
      root = config.server.root = upath.join(dirs.pwd, config.server.root);
      if (!fs.existsSync(root)) {
        if (argv.server) {
          return error('Server\'s root dir does not exist ~>', root);
        }
      }
    } else if (argv.server) {
      return error('Server\'s root not set in in config file');
    }
  } else if (argv.server) {
    return error('Server\'s config not set in config file');
  }
  if ((config.input != null) && config.input.length) {
    ref1 = config.input;
    for (index = i = 0, len = ref1.length; i < len; index = ++i) {
      dirpath = ref1[index];
      tmp = config.input[index] = upath.join(dirs.pwd, dirpath);
      if (!fs.existsSync(tmp)) {
        return error('Input dir does not exist ~>', dirs.relative(tmp));
      }
    }
  } else {
    return error('You need at least one input dir in config file');
  }
  if (config.output != null) {
    if (config.output.js != null) {
      config.output.js = upath.join(dirs.pwd, config.output.js);
      reg = /\{(\w+)\}/g;
      while ((res = reg.exec(config.output.js)) != null) {
        all = res[0], key = res[1];
        config.output.js = config.output.js.replace(all, process.env[key]);
      }
      tmp = path.dirname(config.output.js);
      if (!fs.existsSync(tmp)) {
        return error('JS\'s output dir does not exist ~>', dirs.relative(tmp));
      }
    }
    if (config.output.css != null) {
      config.output.css = upath.join(dirs.pwd, config.output.css);
      reg = /\{(\w+)\}/g;
      while ((res = reg.exec(config.output.css)) != null) {
        all = res[0], key = res[1];
        config.output.css = config.output.css.replace(all, process.env[key]);
      }
      tmp = path.dirname(config.output.css);
      if (!fs.existsSync(tmp)) {
        return error('CSS\'s output dir does not exist ~>', dirs.relative(tmp));
      }
    }
  } else {
    return error('You need at least one output in config file');
  }
  if (config.alias != null) {
    ref2 = config.alias;
    for (name in ref2) {
      location = ref2[name];
      abs_location = upath.join(dirs.pwd, location);
      if (!fs.existsSync(abs_location)) {
        return error("Alias '" + name + "' does not exist ~>", location);
      } else {
        config.alias[name] = dirs.relative(abs_location);
      }
    }
  } else {
    config.alias = {};
  }
  if (config.minify == null) {
    config.minify = {};
  }
  if (config.minify.js == null) {
    config.minify.js = true;
  }
  if (config.minify.css == null) {
    config.minify.css = true;
  }
  if (config.boot == null) {
    return error("Boot module not informed in config file");
  } else {
    config.boot = upath.join(dirs.pwd, config.boot);
    return config.boot = dirs.relative(config.boot);
  }
};

if (config != null) {
  parse_config();
}

module.exports = config;

//# sourceMappingURL=config.js.map
