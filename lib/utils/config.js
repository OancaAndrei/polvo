// Generated by CoffeeScript 1.6.3
(function() {
  var Cli, argv, cli, config, debug, dirs, error, fs, info, parse_config, path, polvo_yml, warn, yml, _ref;

  path = require('path');

  fs = require('fs');

  yml = require('js-yaml');

  dirs = require('./dirs');

  Cli = require('../cli');

  _ref = require('./log')('utils/config'), error = _ref.error, warn = _ref.warn, info = _ref.info, debug = _ref.debug;

  argv = (cli = new Cli).argv;

  parse_config = function(cpath) {
    var config, dirpath, index, location, name, root, tmp, _base, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5;
    config = require(cpath);
    if (!fs.existsSync(dirs.pwd)) {
      return null;
    }
    if (argv.server) {
      if ((config != null ? config.server : void 0) != null) {
        if ((_base = config.server).port == null) {
          _base.port = 3000;
        }
        if ((_ref1 = config.server) != null ? _ref1.root : void 0) {
          root = config.server.root = path.join(dirs.pwd, config.server.root);
          if (!fs.existsSync(root)) {
            error('Server\'s root dir doesn\'t exist ~>', root);
            return null;
          }
        }
      } else {
        error('Server\'s config not set in config file ~> ', dirs.relative(cpath));
        return null;
      }
    }
    if (((config != null ? config.input : void 0) != null) && config.input.length) {
      _ref2 = config.input;
      for (index = _i = 0, _len = _ref2.length; _i < _len; index = ++_i) {
        dirpath = _ref2[index];
        tmp = config.input[index] = path.join(dirs.pwd, dirpath);
        if (!fs.existsSync(tmp)) {
          error('Input dir does not exist ~>', dirs.relative(tmp));
          return null;
        }
      }
    } else {
      error('You need at least one input dir in your config file');
      return null;
    }
    if ((config != null ? config.output : void 0) != null) {
      if (config.output.js != null) {
        config.output.js = path.join(dirs.pwd, config.output.js);
        tmp = path.dirname(config.output.js);
        if (!fs.existsSync(tmp)) {
          error('JS\'s output dir does not exist ~>', dirs.relative(tmp));
          return null;
        }
      }
      if (config.output.css != null) {
        config.output.css = path.join(dirs.pwd, config.output.css);
        tmp = path.dirname(config.output.css);
        if (!fs.existsSync) {
          error('CSS\'s output dir does not exist ~>', dirs.relative(tmp));
          return null;
        }
      }
    } else {
      error('You need at least one output in your config file');
      return null;
    }
    if (config.mappings != null) {
      _ref3 = config.mappings;
      for (name in _ref3) {
        location = _ref3[name];
        tmp = config.mappings[name] = path.join(dirs.pwd, location);
        if (!fs.existsSync(tmp)) {
          error("Mapping dir for '" + name + "' does not exist ~>", dirs.relative(tmp));
          return null;
        }
      }
    }
    if (config.minify != null) {
      config.minify.js = (_ref4 = config.minify.js) != null ? _ref4 : true;
      config.minify.css = (_ref5 = config.minify.css) != null ? _ref5 : true;
    } else {
      config.minify = {
        js: true,
        css: true
      };
    }
    return config;
  };

  config = null;

  if (dirs.pwd != null) {
    if (argv['config-file'] != null) {
      polvo_yml = path.join(dirs.pwd, argv['config-file']);
    } else {
      polvo_yml = path.join(dirs.pwd, "polvo.yml");
    }
    if (fs.existsSync(polvo_yml)) {
      config = parse_config(polvo_yml);
    } else {
      error('Config file not found ~> ', polvo_yml);
    }
  }

  module.exports = config;

}).call(this);

/*
//@ sourceMappingURL=config.map
*/
