// Generated by CoffeeScript 1.6.3
(function() {
  var Cli, Config, ConfigGen, Polvo, ProjectGen, Tentacle, colors, debug, error, fs, log, path, warn, _ref;

  require('source-map-support').install();

  fs = require("fs");

  path = require("path");

  colors = require('colors');

  Cli = require('./polvo/cli');

  Config = require('./polvo/config');

  Tentacle = require('./polvo/core/tentacle');

  ProjectGen = require('./polvo/generators/project');

  ConfigGen = require('./polvo/generators/config');

  _ref = require('./polvo/utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Polvo = (function() {
    Polvo.options = null;

    Polvo.skip_initial_compile = false;

    Polvo.prototype.polvo_base = null;

    Polvo.prototype.config = null;

    Polvo.prototype.tentacles = null;

    Polvo.prototype.before_compile = null;

    function Polvo(basedir, options, skip_initial_compile) {
      var base, contents, filepath, flag, k, schema, v, _i, _len, _ref1, _ref2;
      if (options == null) {
        options = null;
      }
      if (skip_initial_compile == null) {
        skip_initial_compile = false;
      }
      this.polvo_base = path.dirname(__dirname);
      this.options = options;
      this.skip_initial_compile = skip_initial_compile;
      this.basepath = path.resolve(basedir || ".");
      global.cli = this.cli = new Cli(options);
      _ref1 = 'nicwr'.split('');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        flag = _ref1[_i];
        if (typeof (base = this.cli.argv[flag]) === 'string') {
          this.basepath = path.resolve(base);
          break;
        }
      }
      if (this.options != null) {
        _ref2 = this.options;
        for (k in _ref2) {
          v = _ref2[k];
          this.cli.argv[k] = v;
        }
      }
      if (this.cli.argv.v) {
        filepath = path.join(__dirname, "./../package.json");
        contents = fs.readFileSync(filepath, "utf-8");
        schema = JSON.parse(contents);
        return log(schema.version);
      } else if (this.cli.argv.n) {
        new ProjectGen(this.basepath).create(this.cli.argv.n);
      } else if (this.cli.argv.i) {
        new ConfigGen(this.basepath).create();
      } else if (this.cli.argv.c || this.cli.argv.r || this.cli.argv.w || this.cli.argv.s) {
        this.init();
        if (!skip_initial_compile) {
          if (this.cli.argv.c || this.cli.argv.r || this.cli.argv.w) {
            this.compile();
          }
        }
      } else {
        return log(this.cli.opts.help());
      }
    }

    Polvo.prototype.init = function() {
      var conf, _i, _len, _ref1, _results;
      this.tentacles = [];
      this.config = new Config(this);
      _ref1 = this.config.confs;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        conf = _ref1[_i];
        _results.push(this.tentacles.push(new Tentacle(this, this.cli, conf)));
      }
      return _results;
    };

    Polvo.prototype.compile = function(header_code, footer_code) {
      var tentacle, _i, _len, _ref1;
      if (header_code == null) {
        header_code = "";
      }
      if (footer_code == null) {
        footer_code = "";
      }
      _ref1 = this.tentacles;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tentacle = _ref1[_i];
        if ((this.cli.argv.c != null) || (this.cli.argv.w != null)) {
          tentacle.compile(header_code, footer_code);
        } else if (this.cli.argv.r) {
          tentacle.optimize(header_code, footer_code);
        }
      }
      if (process.send) {
        return process.send({
          channel: null,
          msg: 'status.compiled'
        });
      }
    };

    Polvo.prototype.reset = function(options) {
      var config, key, val, _i, _len, _ref1;
      _ref1 = this.config;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        config = _ref1[_i];
        config.reset();
      }
      if (options != null) {
        for (val in options) {
          key = options[val];
          this.options[key] = val;
        }
      }
      this.init(true);
      return this.compile();
    };

    return Polvo;

  })();

}).call(this);

/*
//@ sourceMappingURL=polvo.map
*/
