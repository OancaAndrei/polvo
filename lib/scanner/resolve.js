// Generated by CoffeeScript 1.6.3
(function() {
  var closest_node_modules, fs, path, resolve, resolve_file, resolve_id, resolve_index, resolve_module;

  path = require('path');

  fs = require('fs');

  resolve = module.exports = function(filepath, id) {
    var caller, dirpath, file;
    id = id.replace(/\.js$/m, '');
    file = resolve_id(filepath, id);
    dirpath = path.dirname(filepath);
    if (file != null) {
      return path.resolve(file);
    }
    caller = path.relative(dirpath, filepath);
    console.log("Cannot find module '" + id + "' for '" + caller + "'");
    return null;
  };

  resolve_id = function(filepath, id) {
    var file, idpath, seg, segs;
    if (id[0] !== '.') {
      return resolve_module(filepath, id);
    }
    segs = [].concat(id.split('/'));
    idpath = path.dirname(filepath);
    while (segs.length) {
      seg = segs.shift();
      idpath = path.resolve(idpath, seg);
    }
    if ((file = resolve_file(idpath))) {
      return file;
    }
    if ((file = resolve_module(filepath, id))) {
      return file;
    }
    if ((file = resolve_index(filepath, idpath))) {
      return file;
    }
  };

  resolve_file = function(filepath) {
    if ((path.extname(filepath)) === '') {
      filepath += '.js';
    }
    if (fs.existsSync(filepath)) {
      return filepath;
    }
    return null;
  };

  resolve_index = function(dirpath) {
    var filepath;
    filepath = path.join(dirpath, 'index.js');
    if (fs.existsSync(filepath)) {
      return filepath;
    }
    return null;
  };

  resolve_module = function(filepath, id) {
    var dir, file, idpath, json, main, nmods;
    nmods = closest_node_modules(filepath);
    json = path.join(nmods, id, 'package.json');
    if (fs.existsSync(json)) {
      main = (require(json)).main;
      if (main != null) {
        main = path.join(path.dirname(json), main);
        if ((file = resolve_file(main)) != null) {
          return file;
        }
        dir = path.join(path.dirname(json), dir);
        if ((file = resolve_dir(main)) != null) {
          return file;
        }
      }
      if ((file = resolve_dir(file)) != null) {
        return file;
      }
    }
    idpath = path.join(nmods, id);
    if ((file = resolve_file(idpath)) != null) {
      return file;
    }
    if ((file = resolve_dir(idpath)) != null) {
      return file;
    }
  };

  closest_node_modules = function(filepath) {
    var nmods, tmp;
    if ((path.extname(filepath)) !== '') {
      if (!fs.lstatSync(filepath).isDirectory()) {
        tmp = path.dirname(filepath);
      }
    } else {
      tmp = filepath;
    }
    while (tmp !== '/') {
      nmods = path.join(tmp, 'node_modules');
      if (fs.existsSync(nmods)) {
        return nmods;
      } else {
        tmp = path.join(tmp, '..');
      }
    }
    return null;
  };

}).call(this);

/*
//@ sourceMappingURL=resolve.map
*/
