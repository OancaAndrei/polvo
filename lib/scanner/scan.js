// Generated by CoffeeScript 1.6.3
var config, dirs, esprima, filter_dependencies, fs, fsu, path, resolve, _;

fs = require('fs');

path = require('path');

_ = require('lodash');

esprima = require('esprima');

fsu = require('fs-util');

dirs = require('../utils/dirs');

config = require('../utils/config').parse();

resolve = require('./resolve');

exports.dependencies = function(filepath, raw) {
  var aliased, dep, _i, _len, _ref;
  aliased = {};
  _ref = filter_dependencies(esprima.parse(raw));
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    dep = _ref[_i];
    aliased[dep] = resolve(filepath, dep);
  }
  return aliased;
};

exports.dependents = function(file, filepath, raw) {
  var dirpath, files, _i, _j, _len, _len1, _ref, _ref1;
  files = [];
  _ref = config.input;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    dirpath = _ref[_i];
    _ref1 = fsu.find(dirpath, file.compiler.ext);
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      filepath = _ref1[_j];
      if (filepath === file.filepath) {
        continue;
      }
      files.push({
        filepath: filepath,
        raw: fs.readFileSync(filepath).toString()
      });
    }
  }
  return file.compiler.resolve_dependents(file.filepath, files);
};

filter_dependencies = function(node, found) {
  var is_exp, is_idf, is_lit, is_req, item, key, _i, _len, _ref, _ref1, _ref2, _ref3;
  if (found == null) {
    found = [];
  }
  if (node instanceof Array) {
    for (_i = 0, _len = node.length; _i < _len; _i++) {
      item = node[_i];
      filter_dependencies(item, found);
    }
  } else if (node instanceof Object) {
    for (key in node) {
      item = node[key];
      filter_dependencies(item, found);
    }
  }
  if (node instanceof Object) {
    is_exp = (node != null ? node.type : void 0) === 'CallExpression';
    is_idf = (node != null ? (_ref = node.callee) != null ? _ref.type : void 0 : void 0) === 'Identifier';
    is_req = (node != null ? (_ref1 = node.callee) != null ? _ref1.name : void 0 : void 0) === 'require';
    is_lit = (node != null ? (_ref2 = node["arguments"]) != null ? (_ref3 = _ref2[0]) != null ? _ref3.type : void 0 : void 0 : void 0) === 'Literal';
    if (is_exp && is_idf && is_req && is_lit) {
      found.push(node["arguments"][0].value);
    }
  }
  return found;
};

/*
//@ sourceMappingURL=scan.map
*/
