// Generated by CoffeeScript 1.10.0

/*
Experimental almost-non-readable port of MicroEvent in Coffeescript with some
naming modifications and a new 'once' method.
 
Original project:
https://github.com/jeromeetienne/microevent.js
 */
var MicroEvent,
  slice = [].slice;

module.exports = MicroEvent = (function() {
  function MicroEvent() {}

  MicroEvent.prototype._init = function() {
    return this._listn || (this._listn = {});
  };

  MicroEvent.prototype._create = function(e) {
    return this._init()[e] || (this._init()[e] = []);
  };

  MicroEvent.prototype.on = function(e, f) {
    return (this._create(e)).push(f);
  };

  MicroEvent.prototype.off = function(e, f) {
    var t;
    if ((t = this._init()[e]) != null) {
      return t.splice(t.indexOf(f), 1);
    }
  };

  MicroEvent.prototype.once = function(e, f) {
    var t;
    return this.on(e, (t = (function(_this) {
      return function() {
        return (_this.off(e, t)) && f.apply(_this, arguments);
      };
    })(this)));
  };

  MicroEvent.prototype.emit = function() {
    var a, e, i, l, len, t;
    e = arguments[0], a = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if ((t = this._init()[e]) != null) {
      for (i = 0, len = t.length; i < len; i++) {
        l = t[i];
        l.apply(this, a);
      }
    }
    return 0;
  };

  MicroEvent.mixin = function(target) {
    var p, results, t;
    t = typeof target === 'function' ? target.prototype : target;
    results = [];
    for (p in this.prototype) {
      results.push(t[p] = this.prototype[p]);
    }
    return results;
  };

  return MicroEvent;

})();

//# sourceMappingURL=microevent.js.map
