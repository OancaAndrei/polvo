// Generated by CoffeeScript 1.6.2
(function() {
  var ArrayUtil, FnUtil, MinifyUtil, Optimizer, StringUtil, Tentacle, Tree, connect, cp, cs, debug, error, fs, fsu, io, log, path, util, warn, _ref;

  fs = require('fs');

  fsu = require('fs-util');

  path = require('path');

  cs = require("coffee-script");

  cp = require("child_process");

  connect = require('connect');

  util = require('util');

  io = require('socket.io');

  FnUtil = require('./../utils/fn-util');

  ArrayUtil = require('./../utils/array-util');

  StringUtil = require('./../utils/string-util');

  MinifyUtil = require('./../utils/minify-util');

  Tree = require('./tree');

  Optimizer = require('./optimizer');

  _ref = require('./../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Tentacle = (function() {
    Tentacle.prototype.socket = null;

    Tentacle.prototype.trees = null;

    Tentacle.prototype.optimizer = null;

    Tentacle.prototype.compilers = null;

    Tentacle.prototype.conn = null;

    Tentacle.prototype.watchers = null;

    function Tentacle(polvo, cli, config) {
      var _this = this;

      this.polvo = polvo;
      this.cli = cli;
      this.config = config;
      if (this.cli.argv.c || this.cli.argv.w || this.cli.argv.r) {
        this.init();
      }
      if (this.cli.argv.w) {
        this.watch();
      }
      if (this.cli.argv.s) {
        setTimeout((function() {
          return _this.serve();
        }), 1);
      }
    }

    Tentacle.prototype.init = function() {
      this.compilers = {};
      this.trees = [];
      this.trees.push(new Tree(this.polvo, this.cli, this.config, this));
      return this.optimizer = new Optimizer(this.polvo, this.cli, this.config, this);
    };

    Tentacle.prototype.serve = function() {
      var address, index, port, root;

      root = this.config.server.root;
      port = this.config.server.port;
      index = path.join(root, 'index.html');
      this.conn = connect().use(connect["static"](root)).use(function(req, res) {
        if (~(req.url.indexOf('.'))) {
          res.statusCode = 404;
          return res.end('File not found: ' + req.url);
        } else {
          return res.end(fs.readFileSync(index, 'utf-8'));
        }
      }).listen(port);
      if (!this.cli.argv.r) {
        this.socket = io.listen(53211, {
          'log level': 0
        });
      }
      address = 'http://localhost:' + port;
      log('Server running at '.cyan + address);
      if (process.send) {
        return process.send({
          channel: null,
          msg: 'server.started'
        });
      }
    };

    Tentacle.prototype.use = function(compiler) {
      if (this.compilers[compiler.NAME] != null) {
        return;
      }
      return this.compilers[compiler.NAME] = compiler;
    };

    Tentacle.prototype.notify_socket = function(file) {
      var file_id, file_type;

      if (this.socket == null) {
        return;
      }
      file_type = file.type;
      file_id = file.id;
      return this.socket.sockets.emit('refresh', {
        file_type: file_type,
        file_id: file_id
      });
    };

    Tentacle.prototype.clear_destination = function() {
      if (fs.existsSync(this.config.destination)) {
        fsu.rm_rf(this.config.destination);
      }
      return fsu.mkdir_p(this.config.destination);
    };

    Tentacle.prototype.compile = function() {
      var tree, _i, _len, _ref1;

      this.clear_destination();
      _ref1 = this.trees;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tree = _ref1[_i];
        tree.compile_files_to_disk();
      }
      return this.optimizer.write_amd_loader(false);
    };

    Tentacle.prototype.watch = function() {
      var tree, _i, _len, _ref1, _results;

      _ref1 = this.trees;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tree = _ref1[_i];
        _results.push(tree.watch());
      }
      return _results;
    };

    Tentacle.prototype.optimize = function() {
      this.clear_destination();
      return this.optimizer.optimize();
    };

    Tentacle.prototype.get_all_files = function() {
      var buffer, tree, _i, _len, _ref1;

      buffer = [];
      _ref1 = this.trees;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tree = _ref1[_i];
        buffer = buffer.concat(tree.files);
      }
      return buffer;
    };

    Tentacle.prototype.reset = function() {
      var tree, _i, _len, _ref1, _results;

      if (this.conn != null) {
        this.conn.close();
      }
      _ref1 = this.trees;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tree = _ref1[_i];
        _results.push(tree.close_watchers());
      }
      return _results;
    };

    return Tentacle;

  })();

}).call(this);

/*
//@ sourceMappingURL=tentacle.map
*/
