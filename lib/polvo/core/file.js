// Generated by CoffeeScript 1.6.3
(function() {
  var Coffeescript, File, Html, Jade, Javascript, Style, Stylus, debug, error, fs, fsu, log, path, warn, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  fs = require('fs');

  fsu = require('fs-util');

  Coffeescript = require('./../compilers/coffeescript');

  Javascript = require('./../compilers/javascript');

  Jade = require('./../compilers/jade');

  Html = require('./../compilers/html');

  Stylus = require('./../compilers/stylus');

  Style = require('./../compilers/style');

  _ref = require('./../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = File = (function() {
    File.EXTENSIONS = [Coffeescript.EXT, Javascript.EXT, Jade.EXT, Html.EXT, Stylus.EXT, Style.EXT];

    File.COMPILERS = [Coffeescript, Javascript, Jade, Html, Stylus, Style];

    File.prototype.id = null;

    File.prototype.type = null;

    File.prototype.name = null;

    File.prototype.absolute_path = null;

    File.prototype.relative_path = null;

    File.prototype.destination_path = null;

    File.prototype.destination_folder = null;

    File.prototype.dependencies = null;

    File.prototype.baseclasses = null;

    function File(polvo, cli, config, tentacle, tree, src_dir, absolute_path) {
      this.polvo = polvo;
      this.cli = cli;
      this.config = config;
      this.tentacle = tentacle;
      this.tree = tree;
      this.src_dir = src_dir;
      this.absolute_path = absolute_path;
      Coffeescript.POLVO = Javascript.POLVO = Jade.POLVO = Html.POLVO = Stylus.POLVO = this.polvo;
      this.compiler = this._resolve_compiler();
      this.type = this.compiler.TYPE;
      this.tentacle.use(this.compiler);
      this.dependencies = [];
      this.baseclasses = [];
      this.refresh();
      this.compile_to_str();
    }

    File.prototype.refresh = function() {
      this.raw = fs.readFileSync(this.absolute_path, "utf-8");
      this.relative_path = this.absolute_path.replace(this.src_dir, '');
      this.relative_dir = path.dirname(this.relative_path);
      this.name = path.basename(this.relative_path);
      this.relative_path = this.relative_path.replace(/^\//m, '');
      this.relative_dir = this.relative_dir.replace(/^\//m, '');
      if (this.relative_dir === '.') {
        this.relative_dir = '';
      }
      this.id = this.compiler.strip_ext(this.relative_path);
      this.out = {};
      this.out.absolute_src_path = path.join(this.config.destination, this.relative_path);
      if (this.compiler.translate_map_ext != null) {
        this.out.absolute_map_path = this.compiler.translate_map_ext(this.out.absolute_src_path);
      }
      this.out.absolute_path = this.compiler.translate_ext(this.out.absolute_src_path);
      this.out.absolute_dir = path.dirname(this.out.absolute_path);
      this.out.relative_path = this.out.absolute_path.replace(this.config.destination, '');
      return this.out.relative_path = this.out.relative_path.replace(/^\//m, '');
    };

    File.prototype.compile_to_str = function(after_compile, exclude_anonymous_reqs, compile_dependents) {
      var _this = this;
      return this.compiler.compile(this, function(js, map, src) {
        js = _this.inject_dependencies(js, exclude_anonymous_reqs);
        if (exclude_anonymous_reqs) {
          js = _this.exclude_anonymous_reqs(js);
        }
        return typeof after_compile === "function" ? after_compile(js, map, src) : void 0;
      }, compile_dependents);
    };

    File.prototype.delete_from_disk = function() {
      if (fs.existsSync(this.out.absolute_path)) {
        fs.unlinkSync(this.out.absolute_path);
      }
      if (fs.existsSync(this.out.absolute_src_path)) {
        fs.unlinkSync(this.out.absolute_src_path);
      }
      if (fs.existsSync(this.out.absolute_map_path)) {
        return fs.unlinkSync(this.out.absolute_map_path);
      }
    };

    File.prototype.compile_to_disk = function(compile_dependents) {
      var _this = this;
      return this.compile_to_str(function(js, src_map, src) {
        if (!fs.existsSync(_this.out.absolute_dir)) {
          fsu.mkdir_p(_this.out.absolute_dir);
        }
        fs.writeFileSync(_this.out.absolute_path, js);
        if ((src_map != null) && (_this.out.absolute_map_path != null)) {
          fs.writeFileSync(_this.out.absolute_map_path, src_map);
        }
        if (src != null) {
          fs.writeFileSync(_this.out.absolute_src_path, src);
        }
        _this.tentacle.notify_socket(_this);
        return log(("âœ“ " + _this.out.relative_path).green);
      }, null, compile_dependents);
    };

    File.prototype.extract_dependencies = function(js_code) {
      var dep, matched, require_reg, _ref1, _results;
      this.dependencies = [];
      this.baseclasses = [];
      require_reg = /([^\s]+)?(?:\s*=\s*)?(?:require\s*\()(?:'|")(.+)(?:'|")/g;
      _results = [];
      while ((matched = require_reg.exec(js_code))) {
        dep = {
          name: matched[1],
          id: matched[2],
          vendor: matched[1] === void 0 || (matched[2] in this.config.vendors.javascript),
          incompatible: (_ref1 = matched[2], __indexOf.call(this.config.vendors.javascript.incompatible, _ref1) >= 0)
        };
        if (dep.is_vendor === true || dep.name === void 0) {
          _results.push(this.dependencies.push(dep));
        } else {
          _results.push(this.dependencies.splice(this.dependencies_diff_head++, 0, dep));
        }
      }
      return _results;
    };

    File.prototype.inject_dependencies = function(js_code, exclude_anonymous_reqs) {
      var dep, paths, replace, search, _i, _len, _ref1;
      if (exclude_anonymous_reqs == null) {
        exclude_anonymous_reqs = false;
      }
      this.extract_dependencies(js_code);
      if (this.dependencies.length) {
        paths = [];
        _ref1 = this.dependencies;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          dep = _ref1[_i];
          if (exclude_anonymous_reqs && dep.incompatible) {
            continue;
          } else {
            paths.push(dep.id);
          }
        }
        paths = ", '" + (paths.join("', '")) + "'";
      } else {
        paths = '';
      }
      search = "define(['require', 'exports', 'module']";
      replace = "define('" + this.id + "', ['require', 'exports', 'module'" + paths + "]";
      return js_code.replace(search, replace);
    };

    File.prototype.exclude_anonymous_reqs = function(code) {
      var reg;
      reg = /(^\s*require.+$)/mg;
      return code.replace(reg, "/* $1 */");
    };

    File.prototype._resolve_compiler = function() {
      var ext, index, _i, _len, _ref1;
      _ref1 = File.EXTENSIONS;
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        ext = _ref1[index];
        if (ext.test(this.absolute_path)) {
          return File.COMPILERS[index];
        }
      }
    };

    return File;

  })();

}).call(this);

/*
//@ sourceMappingURL=file.map
*/
