// Generated by CoffeeScript 1.6.2
(function() {
  var Loader, debug, error, fs, log, path, util, warn, _ref;

  fs = require('fs');

  path = require('path');

  util = require('util');

  _ref = require('../../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Loader = (function() {
    Loader.prototype.node_modules = null;

    function Loader(polvo, cli, config, tentacle, optimizer) {
      this.polvo = polvo;
      this.cli = cli;
      this.config = config;
      this.tentacle = tentacle;
      this.optimizer = optimizer;
      this.node_modules = path.join(this.polvo.polvo_base, 'node_modules');
    }

    Loader.prototype.write_amd_loader = function(paths) {
      var loader, name, release_path, url, _ref1;

      paths || (paths = {});
      _ref1 = this.config.vendors;
      for (name in _ref1) {
        url = _ref1[name];
        if (/^http/m.test(url)) {
          paths[name] = url;
        }
      }
      loader = this.get_socketio();
      loader += this.get_amd_loader();
      if (paths != null) {
        paths = (util.inspect(paths)).replace(/\s/g, '');
      } else {
        paths = '{}';
      }
      loader += "\n\n\n/*************************************************************************\n * POLVO - Automatic RJS configuration >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n*************************************************************************/\n\nrequire.config({\n  baseUrl: '" + this.config.base_url + "',\n  paths: " + paths + "\n});\nrequire( ['" + this.config.main_module + "'] );\n\n/*************************************************************************\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< POLVO - Automatic configuration\n*************************************************************************/";
      release_path = path.join(this.config.destination, this.config.index);
      if (this.config.optimize.minify && this.cli.r) {
        loader = MinifyUtil.min(loader);
      }
      return fs.writeFileSync(release_path, loader);
    };

    Loader.prototype.get_amd_loader = function(release_mode) {
      var compiler, helpers, initializer, name, rjs, rjs_path, _ref1;

      helpers = '';
      _ref1 = this.tentacle.compilers;
      for (name in _ref1) {
        compiler = _ref1[name];
        if (compiler.fetch_helpers) {
          helpers += '\n\n// ~~ ' + name + '\n';
          helpers += compiler.fetch_helpers();
        }
      }
      if (release_mode) {
        rjs_path = path.join(this.node_modules, 'almond', 'almond.js');
        rjs = fs.readFileSync(rjs_path, 'utf-8');
      } else {
        rjs_path = path.join(this.node_modules, 'requirejs', 'require.js');
        rjs = fs.readFileSync(rjs_path, 'utf-8');
      }
      return initializer = "\n\n\n/*************************************************************************\n * POLVO - Compiler's Helpers >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n*************************************************************************/\n" + helpers + "\n\n\n/*************************************************************************\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< POLVO - Compiler's Helpers\n*************************************************************************/\n" + rjs;
    };

    Loader.prototype.get_socketio = function() {
      var initializer, io, io_path;

      initializer = "\n\n\n/*************************************************************************\n * >>>>>>>>>>>>>>>>>>>>>>>>>>>>> POLVO - Socket Initializer for LiveReload\n*************************************************************************/\n\nvar host = window.location.protocol + '//' + window.location.hostname;\nvar refresher = io.connect( host, {port: 53211} );\nrefresher.on(\"refresh\", function(data)\n{\n  var el;\n\n  // refresh approach for javascript and templates\n  if(data.file_type == 'javascript' || data.file_type == 'template' )\n    return location.reload();\n \n  // refresh approach for styles\n  if(data.file_type == 'style') {\n    el = document.getElementById( data.file_id );\n    el.parentNode.removeChild( el );\n    require.undef( data.file_id );\n    require([data.file_id]);\n  }\n});\n\n/*************************************************************************\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<< POLVO - Socket Initializer for LiveReload\n*************************************************************************/";
      io_path = path.join(this.node_modules, 'socket.io', 'node_modules');
      io_path = path.join(io_path, 'socket.io-client', 'dist', 'socket.io.js');
      io = fs.readFileSync(io_path, 'utf-8');
      return io += "\n\n\n" + initializer + "\n\n\n";
    };

    Loader.prototype.get_compilers_helpers = function() {
      var initializer;

      return initializer = "";
    };

    return Loader;

  })();

}).call(this);

/*
//@ sourceMappingURL=loader.map
*/
