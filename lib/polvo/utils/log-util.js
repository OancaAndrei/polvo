// Generated by CoffeeScript 1.6.2
(function() {
  var growl, icon_error, icon_warn, interval, log_to_stderr, log_to_stdout, msgs, os, process_msgs, queue_msg, start_worker, stop_worker;

  os = require('os');

  growl = os.platform() === 'win32' ? null : require('growl');

  icon_warn = __dirname + '/../images/warning.png';

  icon_error = __dirname + '/../images/error.png';

  log_to_stdout = function() {
    if (process.send) {
      return process.send({
        channel: 'stdout',
        msg: msg
      });
    } else {
      return console.log(msg);
    }
  };

  log_to_stderr = function() {
    if (process.send) {
      return process.send({
        channel: 'stderr',
        msg: msg
      });
    } else {
      return console.error(msg);
    }
  };

  exports.log = function(msg, send_to_growl) {
    if (send_to_growl == null) {
      send_to_growl = false;
    }
    msg = "" + msg.white;
    log_to_stdout(msg);
    return msg;
  };

  exports.error = function(msg, send_to_growl, file) {
    if (send_to_growl == null) {
      send_to_growl = true;
    }
    if (file == null) {
      file = null;
    }
    msg = ("" + 'ERROR'.bold + " " + msg).red;
    log_to_stderr(msg);
    if (send_to_growl && (growl != null)) {
      msg = msg.replace(/\[\d{2}m/g, "");
      msg = msg.replace(/(\[\dm)([^\s]+)/ig, "<$2>$3");
      queue_msg({
        msg: msg,
        opts: {
          title: 'Polvo',
          image: icon_error
        }
      });
    }
    return msg;
  };

  exports.warn = function(msg, send_to_growl) {
    if (send_to_growl == null) {
      send_to_growl = true;
    }
    msg = ("" + 'WARNING'.bold + " " + msg).yellow;
    log_to_stderr(msg);
    if (send_to_growl && (growl != null)) {
      msg = msg.replace(/\[\d{2}m/g, "");
      msg = msg.replace(/(\[\dm)([^\s]+)/ig, "<$2>$3");
      queue_msg({
        msg: msg,
        opts: {
          title: 'Polvo',
          image: icon_warn
        }
      });
    }
    return msg;
  };

  msgs = [];

  interval = null;

  start_worker = function() {
    if (interval == null) {
      interval = setInterval(process_msgs, 150);
      return process_msgs();
    }
  };

  stop_worker = function() {
    if (interval != null) {
      clearInterval(interval);
      return interval = null;
    }
  };

  queue_msg = function(msg) {
    msgs.push(msg);
    return start_worker();
  };

  process_msgs = function() {
    var msg;

    if (msgs.length) {
      msg = msgs.shift();
      return growl.notify(msg.msg, msg.opts);
    } else {
      return stop_worker();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=log-util.map
*/
