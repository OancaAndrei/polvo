// Generated by CoffeeScript 1.6.2
(function() {
  var Jade, debug, error, fs, jade, log, path, warn, _ref;

  path = require('path');

  fs = require('fs');

  jade = require('jade');

  _ref = require('./../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Jade = (function() {
    var AMD_WRAPPER;

    function Jade() {}

    Jade.NAME = 'jade';

    Jade.TYPE = 'template';

    Jade.EXT = /(\/)([^\/_]+)(\.jade)$/m;

    AMD_WRAPPER = "// Compiled by Polvo, using Jade\ndefine(['require', 'exports', 'module'], function(require, exports, module){\n  return exports.module = ~code\n});";

    Jade.compile = function(file, after_compile) {
      var compiled, err, wrapped;

      try {
        compiled = jade.compile(file.raw, {
          filename: file.absolute_path,
          client: true,
          compileDebug: true
        });
      } catch (_error) {
        err = _error;
        return error(err.message);
      }
      wrapped = AMD_WRAPPER.replace('~code', compiled.toString());
      return after_compile(wrapped);
    };

    Jade.fetch_helpers = function() {
      var filepath;

      filepath = path.join(__dirname, '..', '..', '..', 'node_modules', 'jade');
      filepath = path.join(filepath, 'runtime.js');
      return fs.readFileSync(filepath, 'utf-8');
    };

    Jade.translate_ext = function(filepath) {
      return filepath.replace(this.EXT, '$1$2.js');
    };

    Jade.strip_ext = function(filepath) {
      return filepath.replace(this.EXT, '$1$2');
    };

    return Jade;

  })();

}).call(this);

/*
//@ sourceMappingURL=jade.map
*/
