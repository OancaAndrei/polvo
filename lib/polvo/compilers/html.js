// Generated by CoffeeScript 1.6.2
(function() {
  var Html, debug, error, fs, log, path, warn, _ref;

  path = require('path');

  fs = require('fs');

  _ref = require('./../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Html = (function() {
    var AMD_WRAPPER;

    function Html() {}

    Html.NAME = 'html';

    Html.TYPE = 'template';

    Html.EXT = /\.(html|htm)$/m;

    AMD_WRAPPER = "// Assembed by Polvo\ndefine(['require', 'exports', 'module'], function(require, exports, module)\n{\n  return exports.module = \"~code\";\n});";

    Html.compile = function(file, after_compile, compile_dependents) {
      var contents, include, wrapped;

      if (/^_/m.test(file.name)) {
        if (compile_dependents) {
          this.compile_dependents(file);
        }
        return;
      }
      contents = file.raw.replace(/\n/g, ' \\\n');
      include = /^\s*(?!<\!--)<include\s+src=(?:"|')([^"']+)(?:"|')\s*\/>/gm;
      wrapped = AMD_WRAPPER.replace('~code', contents.replace(include, ''));
      return after_compile(wrapped);
    };

    Html.translate_ext = function(filepath) {
      return filepath.replace(this.EXT, '.js');
    };

    Html.strip_ext = function(filepath) {
      return filepath.replace(this.EXT, '');
    };

    Html.compile_dependents = function(file) {
      var abs_path, compile_dependents, cond1, cond2, f, files, has_inc_reg, import_dir, import_dir_parts, import_file, import_path, inc_all_reg, match, parent_dir_parts, part, tentacle, tree, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _results;

      files = [];
      _ref1 = this.POLVO.tentacles;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tentacle = _ref1[_i];
        _ref2 = tentacle.trees;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          tree = _ref2[_j];
          files = files.concat(tree.files);
        }
      }
      has_inc_reg = /^\s*(?!<\!--)<include/gm;
      _results = [];
      for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
        f = files[_k];
        if (f.type !== this.TYPE) {
          continue;
        }
        if (!has_import_reg.test(f.raw)) {
          continue;
        }
        inc_all_reg = /^\s*(?!<\!--)<include\s+src=(?:"|')([^"']+)(?:"|')\s*\/>/gm;
        _results.push((function() {
          var _results1;

          _results1 = [];
          while ((match = all_import_reg.exec(f.raw)) != null) {
            import_path = match[1];
            import_dir = path.dirname(import_path);
            import_file = path.basename(import_path);
            parent_dir_parts = (path.dirname(f.absolute_path)).split('/');
            import_dir_parts = import_dir.split('/');
            while ((part = import_dir_parts[0]) === '..') {
              import_dir_parts.shift();
              parent_dir_parts.pop();
            }
            abs_path = path.normalize([parent_dir_parts.join('/'), import_dir_parts.join('/'), import_file].join('/'));
            cond1 = ("" + abs_path + ".html") === file.absolute_path;
            cond2 = ("" + abs_path + ".htm") === file.absolute_path;
            if (cond1 || cond2) {
              compile_dependents = /^_/m.test(f.name);
              _results1.push(f.compile_to_disk(compile_dependents));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Html;

  })();

}).call(this);

/*
//@ sourceMappingURL=html.map
*/
