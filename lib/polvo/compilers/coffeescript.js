// Generated by CoffeeScript 1.6.2
(function() {
  var Coffeescript, XRegExp, cs, debug, error, log, path, warn, _ref;

  cs = require('coffee-script');

  path = require('path');

  XRegExp = require('xregexp').XRegExp;

  _ref = require('./../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Coffeescript = (function() {
    var AMD_WRAPPER, LITERATE;

    function Coffeescript() {}

    Coffeescript.NAME = 'coffeescript';

    Coffeescript.TYPE = 'javascript';

    Coffeescript.EXT = /\.(lit|coffee)(\.md)?$/m;

    LITERATE = /\.(litcoffee|coffee\.md)$/m;

    AMD_WRAPPER = "###\n  Compiled by Polvo, using CoffeeScript\n###\n~global_code\ndefine ['require', 'exports', 'module'], (require, exports, module)->\n~code";

    Coffeescript.compile = function(file, after_compile) {
      var bare, clean, compiled, contents, err, global_code, global_reg, global_res, literate, map, raw, sourceMap, temp;

      raw = file.raw;
      global_reg = XRegExp('#>>\n(.*)\n#<<', 's');
      global_res = XRegExp.exec(file.raw, global_reg);
      global_code = global_res != null ? global_res[1] : '';
      clean = raw.replace(global_code, '');
      bare = 1;
      literate = LITERATE.test(file.relative_path);
      sourceMap = 1;
      if (literate) {
        contents = clean.replace(/^[^\s]+.+$/mg, '');
      } else {
        contents = this.reindent(clean);
      }
      contents = AMD_WRAPPER.replace('~code', contents);
      contents = contents.replace('~global_code', global_code);
      try {
        temp = cs.compile(contents, {
          bare: bare,
          sourceMap: sourceMap
        });
        compiled = temp.js;
        compiled += "/*\n//@ sourceMappingURL=" + (path.basename(file.out.absolute_map_path)) + "\n*/";
        map = JSON.parse(temp.v3SourceMap);
        map.file = file.compiler.translate_ext(file.name);
        map.sources = [path.basename(file.name)];
      } catch (_error) {
        err = _error;
        return error(err.message + ' at ' + file.relative_path);
      }
      return after_compile(compiled, JSON.stringify(map, null, 2), contents);
    };

    Coffeescript.translate_ext = function(filepath) {
      return filepath.replace(this.EXT, '.js');
    };

    Coffeescript.strip_ext = function(filepath) {
      return filepath.replace(this.EXT, '');
    };

    Coffeescript.translate_map_ext = function(filepath) {
      return filepath.replace(this.EXT, '.map');
    };

    Coffeescript.reindent = function(code) {
      var identation, match_identation;

      match_identation = /^(\s+).*$/mg;
      identation = '';
      while ((identation.match(/^[ \t]{2,}/m)) == null) {
        identation = match_identation.exec(code);
        if (identation != null) {
          identation = identation[1];
        } else {
          identation = "  ";
        }
      }
      identation = identation.replace(/[\r\n]/g, '');
      return code.replace(/^/mg, "" + identation);
    };

    return Coffeescript;

  })();

}).call(this);

/*
//@ sourceMappingURL=coffeescript.map
*/
