// Generated by CoffeeScript 1.6.2
(function() {
  var Stylus, debug, error, log, nib, path, stylus, warn, _ref;

  stylus = require('stylus');

  nib = require('nib');

  path = require('path');

  _ref = require('./../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Stylus = (function() {
    var AMD_WRAPPER;

    function Stylus() {}

    Stylus.POLVO = null;

    Stylus.NAME = 'stylus';

    Stylus.TYPE = 'style';

    Stylus.EXT = /(\.styl)$/m;

    AMD_WRAPPER = "// Compiled by Polvo, using Stylus\ndefine(['require', 'exports', 'module'], function(require, exports, module){\n\n  var head = document.getElementsByTagName('head')[0];\n  var style = module.exports = document.createElement('style');\n  var content = '~css'\n\n  style.setAttribute('id', '~id');\n  style.setAttribute('type', 'text/css');\n\n  // MODERN BROWSERS?\n  try\n  { \n    style.appendChild(document.createTextNode(content));\n\n  // IE8? (weird things happens without this on IEs)\n  } catch( e )\n  {\n    style.styleSheet.cssText = content; // IE8\n  }\n\n  head.insertBefore(style, head.lastChild);\n  return style;\n});";

    Stylus.compile = function(file, after_compile, compile_dependents) {
      var _this = this;

      if (/^_/m.test(file.name)) {
        if (compile_dependents) {
          this.compile_dependents(file);
        }
        return;
      }
      return stylus(file.raw).set('filename', file.absolute_path).use(nib())["import"]('nib').render(function(err, css) {
        var wrapped;

        if (err != null) {
          return error(err);
        }
        wrapped = AMD_WRAPPER.replace('~css', css.replace(/\n|\r/g, ''));
        wrapped = wrapped.replace(/~id/g, file.id);
        return after_compile(wrapped);
      });
    };

    Stylus.translate_ext = function(filepath) {
      return filepath.replace(this.EXT, '.js');
    };

    Stylus.strip_ext = function(filepath) {
      return filepath.replace(this.EXT, '');
    };

    Stylus.compile_dependents = function(file) {
      var abs_path, all_import_reg, compile_dependents, f, files, has_import_reg, import_dir, import_dir_parts, import_file, import_path, match, parent_dir_parts, part, tentacle, tree, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _results;

      files = [];
      _ref1 = this.POLVO.tentacles;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        tentacle = _ref1[_i];
        _ref2 = tentacle.trees;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          tree = _ref2[_j];
          files = files.concat(tree.files);
        }
      }
      has_import_reg = /^(?!\/\/)@import\s/m;
      _results = [];
      for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
        f = files[_k];
        if (f.type !== this.TYPE) {
          continue;
        }
        if (!has_import_reg.test(f.raw)) {
          continue;
        }
        all_import_reg = /^(?!\/\/)@import\s+(?:"|')(\S+)(?:"|')/mg;
        _results.push((function() {
          var _results1;

          _results1 = [];
          while ((match = all_import_reg.exec(f.raw)) != null) {
            import_path = match[1];
            import_dir = path.dirname(import_path);
            import_file = path.basename(import_path);
            parent_dir_parts = (path.dirname(f.absolute_path)).split('/');
            import_dir_parts = import_dir.split('/');
            while ((part = import_dir_parts[0]) === '..') {
              import_dir_parts.shift();
              parent_dir_parts.pop();
            }
            abs_path = path.normalize([parent_dir_parts.join('/'), import_dir_parts.join('/'), import_file].join('/'));
            if (("" + abs_path + ".styl") === file.absolute_path) {
              compile_dependents = /^_/m.test(f.name);
              _results1.push(f.compile_to_disk(compile_dependents));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Stylus;

  })();

}).call(this);

/*
//@ sourceMappingURL=stylus.map
*/
