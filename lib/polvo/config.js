// Generated by CoffeeScript 1.6.2
(function() {
  var Config, colors, cs, debug, error, fs, fsu, log, path, warn, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require("fs");

  fsu = require("fs-util");

  path = require("path");

  colors = require('colors');

  cs = require("coffee-script");

  _ref = require('./utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Config = (function() {
    Config.prototype.confs = null;

    function Config(polvo) {
      this.polvo = polvo;
      this.setup = __bind(this.setup, this);
      this.basepath = this.polvo.basepath;
      this.confs = [];
      this.init();
    }

    Config.prototype.init = function() {
      var code, config, config_file, contents, err, filepath, fix_scope, item, msg, watcher, _i, _len, _ref1,
        _this = this;

      if ((config = this.polvo.cli.argv["config"]) != null) {
        if (!(config instanceof Object)) {
          config = JSON.parse(config);
        }
        _ref1 = [].concat(config);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          this.tentacle(item);
        }
        return;
      }
      config_file = this.polvo.cli.argv["config-file"];
      filepath = config_file || path.join(this.basepath, "polvo.coffee");
      if (!fs.existsSync(filepath)) {
        msg = "Config file not found: " + filepath.yellow + "\n";
        msg += "Try running:".white + " polvo -i".green;
        msg += " or type".white + " #polvo -h'".green;
        msg += "for more info".white;
        return error(msg);
      }
      contents = fs.readFileSync(filepath, "utf-8");
      if (this.polvo.cli.argv.w) {
        watcher = fsu.watch(filepath);
        watcher.on('change', function(f) {
          filepath = filepath.replace(_this.polvo.basepath, '');
          log(("" + 'Changed'.bold + " " + filepath).cyan);
          log("~> Reloading Polvo.".bold);
          watcher.close();
          return _this.polvo.reset();
        });
      }
      try {
        code = cs.compile(contents, {
          bare: 1
        });
      } catch (_error) {
        err = _error;
        error("Error compiling `polvo.coffee` config file\n\n" + err);
        return proces.exit();
      }
      fix_scope = /(^[\s\t]?)(setup)+(\()/mg;
      code = code.replace(fix_scope, "$1this.$2$3");
      return eval(code);
    };

    Config.prototype.setup = function(config) {
      var a, b, c, d, e, f, g, passed;

      passed = true;
      passed && (passed = a = this.validate_server(config));
      passed && (passed = b = this.validate_sources(config));
      passed && (passed = c = this.validate_excludes(config));
      passed && (passed = d = this.validate_includes(config));
      passed && (passed = e = this.validate_destination(config));
      passed && (passed = f = this.validate_wrappers(config));
      passed && (passed = g = this.validate_vendors(config));
      if (!passed) {
        return process.exit();
      } else {
        return this.confs.push(config);
      }
    };

    Config.prototype.validate_server = function(config) {
      var msg, _base, _ref1, _ref2;

      if (config === null) {
        return true;
      }
      if ((config != null ? (_ref1 = config.server) != null ? _ref1.root : void 0 : void 0) == null) {
        msg = 'You need to inform the `root` property in your server config.';
        msg += '\nCheck your config file.';
        return error(msg);
      }
      config.server.root = path.resolve(config.server.root);
      if ((_ref2 = (_base = config.server).port) == null) {
        _base.port = 3000;
      }
      return true;
    };

    Config.prototype.validate_sources = function(config) {
      var index, msg, src, _i, _len, _ref1;

      if (!((config.sources != null) && config.sources.length)) {
        msg = 'You need to inform at least one source, check your config file.';
        return error(msg);
      }
      _ref1 = config.sources;
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        src = _ref1[index];
        if (src.indexOf(this.basepath) < 0) {
          src = path.join(this.basepath, src);
        }
        if (fs.existsSync(src)) {
          config.sources[index] = src;
        } else {
          msg = "Informed source doesn't exist:\n\t" + src.yellow;
          msg += '\nCheck your config file.';
          return error(msg);
        }
      }
      return true;
    };

    Config.prototype.validate_destination = function(config) {
      var msg;

      if (config.destination == null) {
        msg = 'You need to inform a destination folder, check your config file.';
        return error(msg);
      }
      if (config.destination.indexOf(this.basepath) < 0) {
        config.destination = path.join(this.basepath, config.destination);
      }
      if (!fs.existsSync(config.destination)) {
        fsu.mkdir_p(config.destination);
        msg = "Creating `destination` dir: " + config.destination.cyan;
        warn(msg);
      }
      return true;
    };

    Config.prototype.validate_excludes = function(config) {
      var _ref1;

      if ((_ref1 = config.exclude) == null) {
        config.exclude = [];
      }
      return true;
    };

    Config.prototype.validate_includes = function(config) {
      var _ref1;

      if ((_ref1 = config.include) == null) {
        config.include = [];
      }
      return true;
    };

    Config.prototype.validate_wrappers = function(config) {
      var _base, _base1, _ref1, _ref2;

      if (config.wrappers == null) {
        config.wrappers = {
          javascript: 'amd',
          style: 'amd'
        };
      } else {
        if ((_ref1 = (_base = config.wrappers).javascript) == null) {
          _base.javascript = 'amd';
        }
        if ((_ref2 = (_base1 = config.wrappers).style) == null) {
          _base1.style = 'amd';
        }
      }
      return true;
    };

    Config.prototype.validate_vendors = function(config) {
      var msg, vname, vpath, _ref1, _ref2;

      _ref2 = config != null ? (_ref1 = config.vendors) != null ? _ref1.javascript : void 0 : void 0;
      for (vname in _ref2) {
        vpath = _ref2[vname];
        if ((/^http/m.test(vpath)) || (vname === 'incompatible')) {
          continue;
        }
        if ((vpath.indexOf(this.basepath)) < 0) {
          vpath = path.join(this.basepath, vpath);
        }
        if (!fs.existsSync(vpath)) {
          msg = 'Local vendor not found:';
          msg += '\n\t' + vpath;
          msg += '\nCheck your config file.';
          return error(msg);
        }
        config.vendors.javascript[vname] = vpath;
      }
      return true;
    };

    return Config;

  })();

}).call(this);

/*
//@ sourceMappingURL=config.map
*/
