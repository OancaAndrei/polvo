// Generated by CoffeeScript 1.6.3
(function() {
  var Config, Project, Question, debug, error, log, warn, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Question = require('./question');

  Config = require('./config');

  _ref = require('../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Project = (function(_super) {
    var fs, fsu, path;

    __extends(Project, _super);

    path = require("path");

    fs = require("fs");

    fsu = require('fs-util');

    function Project(basepath) {
      this.basepath = basepath;
      this.scaffold = __bind(this.scaffold, this);
    }

    Project.prototype.create = function(folderpath, name, src, release) {
      var error_msg, q1, q2, q3,
        _this = this;
      if ((typeof folderpath) !== 'string') {
        error_msg = "You need to inform a target path!\n";
        error_msg += "\tpolvo -n myawesomeapp".green;
        return error(error_msg);
      }
      if ((name != null) && (src != null) && (release != null)) {
        return this.scaffold(folderpath, name, src, release);
      }
      q1 = "Path to your src folder? [src] : ";
      q2 = "Path to your release file? [www/js/app.js] : ";
      q3 = "Starting from your webroot '/', what's the folderpath to " + "reach your release file? (i.e. js) (optional) : ";
      return this.ask(q1.magenta, /.*/, function(src) {
        if (src == null) {
          src = null;
        }
        return _this.ask(q2.magenta, /.*/, function(release) {
          if (release == null) {
            release = null;
          }
          return _this.ask(q3.cyan, /.*/, function(httpfolder) {
            var $httpfolder, $release, $src;
            if (httpfolder == null) {
              httpfolder = null;
            }
            $src = src || "src";
            $release = release || "www/js/app.js";
            if (src === '' && release === '' && httpfolder === '') {
              $httpfolder = 'js';
            } else {
              $httpfolder = httpfolder || "";
            }
            _this.scaffold(folderpath, $src, $release, $httpfolder);
            return process.exit();
          });
        });
      });
    };

    Project.prototype.scaffold = function(target, src, release, httpfolder) {
      var config, releasedir, releasefile, srcdir, vendorsdir;
      target = path.resolve(target);
      srcdir = path.join(target, src);
      vendorsdir = path.join(target, "vendors");
      releasefile = path.join(target, release);
      releasedir = path.dirname(releasefile);
      if (fsu.mkdir_p(target)) {
        log("" + 'Created'.green.bold + " " + target);
      }
      if (fsu.mkdir_p(srcdir)) {
        log("" + 'Created'.green.bold + " " + srcdir);
      }
      if (fsu.mkdir_p(vendorsdir)) {
        log("" + 'Created'.green.bold + " " + vendorsdir);
      }
      if (fsu.mkdir_p(releasedir)) {
        log("" + 'Created'.green.bold + " " + releasedir);
      }
      srcdir = srcdir.replace(target, "").substr(1);
      releasefile = releasefile.replace(target, "").substr(1);
      config = new Config(target);
      return config.write(srcdir, releasefile, httpfolder);
    };

    return Project;

  })(Question);

}).call(this);

/*
//@ sourceMappingURL=project.map
*/
