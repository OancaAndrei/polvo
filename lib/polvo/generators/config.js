// Generated by CoffeeScript 1.6.2
(function() {
  var Config, Question, debug, error, log, warn, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Question = require('./question');

  _ref = require('../utils/log-util'), log = _ref.log, debug = _ref.debug, warn = _ref.warn, error = _ref.error;

  module.exports = Config = (function(_super) {
    var fs, path;

    __extends(Config, _super);

    path = require("path");

    fs = require("fs");

    Config.prototype.tpl = "# => SRC FOLDER\ntoast '%src%'\n\n  # EXCLUDED FOLDERS (optional)\n  # exclude: ['folder/to/exclude', 'another/folder/to/exclude', ... ]\n\n  # => VENDORS (optional)\n  # vendors: ['vendors/x.js', 'vendors/y.js', ... ]\n\n  # => OPTIONS (optional, default values listed)\n  # bare: false\n  # packaging: true\n  # expose: ''\n  # minify: true\n\n  # => HTTPFOLDER (optional), RELEASE / DEBUG (required)\n  httpfolder: '%httpfolder%'\n  release: '%release%'\n  debug: '%debug%'";

    function Config(basepath) {
      this.basepath = basepath;
      this.write = __bind(this.write, this);
      this.create = __bind(this.create, this);
    }

    Config.prototype.create = function() {
      var q1, q2, q3,
        _this = this;

      q1 = "Path to your src folder? [src] : ";
      q2 = "Path to your release file? [www/js/app.js] : ";
      q3 = "Starting from your webroot '/', what's the folderpath to " + "reach your release file? (i.e. js) (optional) : ";
      return this.ask(q1.magenta, /.+/, function(src) {
        return _this.ask(q2.magenta, /.+/, function(release) {
          return _this.ask(q3.cyan, /.*/, function(httpfolder) {
            return _this.write(src, release, httpfolder);
          });
        });
      });
    };

    Config.prototype.write = function(src, release, httpfolder) {
      var buffer, filename, filepath, parts, question, rgx,
        _this = this;

      filepath = path.join(this.basepath, "polvo.coffee");
      rgx = /(\/)?((\w+)(\.*)(\w+$))/;
      parts = rgx.exec(release);
      filename = parts[2];
      if (filename.indexOf(".") > 0) {
        debug = release.replace(rgx, "$1$3-debug$4$5");
      } else {
        debug = "" + release + "-debug";
      }
      buffer = this.tpl.replace("%src%", src.replace(/\\/g, "\/"));
      buffer = buffer.replace("%release%", release.replace(/\\/g, "\/"));
      buffer = buffer.replace("%debug%", debug.replace(/\\/g, "\/"));
      buffer = buffer.replace("%httpfolder%", httpfolder.replace(/\\/g, "\/"));
      if (fs.existsSync(filepath)) {
        question = "\tDo you want to overwrite the file: " + filepath.yellow;
        question += " ? [y/N] : ".white;
        return this.ask(question, /.*?/, function(overwrite) {
          if (overwrite.match(/y/i)) {
            _this.save(filepath, buffer);
            return process.exit();
          }
        });
      } else {
        this.save(filepath, buffer);
        return process.exit();
      }
    };

    Config.prototype.save = function(filepath, contents) {
      fs.writeFileSync(filepath, contents);
      log("" + 'Created'.green.bold + " " + filepath);
      return process.exit();
    };

    return Config;

  })(Question);

}).call(this);

/*
//@ sourceMappingURL=config.map
*/
