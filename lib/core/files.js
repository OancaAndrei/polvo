// Generated by CoffeeScript 1.6.3
var File, Files, cli, compiler, config, debug, dirs, error, fsu, info, log_changed, log_created, log_deleted, logger, path, plugins, warn, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

path = require('path');

fsu = require('fs-util');

_ = require('lodash');

dirs = require('../utils/dirs');

config = require('../utils/config').parse();

compiler = require('./compiler');

cli = require('../cli');

plugins = require('../utils/plugins');

logger = require('../utils/logger')('core/files');

error = logger.error, warn = logger.warn, info = logger.info, debug = logger.debug;

log_created = logger.file.created;

log_changed = logger.file.changed;

log_deleted = logger.file.deleted;

File = require('./file');

module.exports = new (Files = (function() {
  var argv, exts, plugin;

  argv = cli.argv();

  exts = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = plugins.length; _i < _len; _i++) {
      plugin = plugins[_i];
      _results.push(plugin.ext);
    }
    return _results;
  })();

  Files.prototype.files = null;

  Files.prototype.watchers = null;

  Files.prototype.watchers_foreing = null;

  Files.prototype.foreing_caller = false;

  function Files() {
    this.onfschange = __bind(this.onfschange, this);
    this.refresh_dependents = __bind(this.refresh_dependents, this);
    this.bulk_create_file = __bind(this.bulk_create_file, this);
    this.collect();
  }

  Files.prototype.collect = function() {
    var dirpath, filepath, _i, _j, _len, _len1, _ref, _ref1;
    this.watchers = [];
    this.watchers_foreing = {};
    this.files = [];
    _ref = config.input;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dirpath = _ref[_i];
      _ref1 = fsu.find(dirpath, exts);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        filepath = _ref1[_j];
        this.create_file(filepath);
      }
    }
    if (argv.watch) {
      return this.watch_inputs();
    }
  };

  Files.prototype.restart = function(file) {
    this.close_watchers();
    return this.collect();
  };

  Files.prototype.has_compiler = function(filepath) {
    var ext, _i, _len;
    for (_i = 0, _len = exts.length; _i < _len; _i++) {
      ext = exts[_i];
      if (ext.test(filepath)) {
        return true;
      }
    }
    return false;
  };

  Files.prototype.create_file = function(filepath) {
    var dirpath, file, is_under_inputs, _i, _len, _ref;
    if (!this.has_compiler(filepath)) {
      return;
    }
    if (file = _.find(this.files, {
      filepath: filepath
    })) {
      return file;
    }
    this.files.push(file = new File(filepath));
    file.on('new:dependencies', this.bulk_create_file);
    file.on('refresh:dependents', this.refresh_dependents);
    file.init();
    is_under_inputs = true;
    _ref = config.input;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dirpath = _ref[_i];
      is_under_inputs && (is_under_inputs = filepath.indexOf(dirpath) === 0);
    }
    if (!is_under_inputs) {
      if (argv.watch) {
        this.watch_file(file.filepath);
      }
    }
    if (this.foreign_caller) {
      log_created(file.filepath);
      this.compile(this.foreign_caller);
    }
    return file;
  };

  Files.prototype.delete_file = function(filepath) {
    var file;
    file = _.find(this.files, {
      filepath: filepath
    });
    this.restart(file);
    return file;
  };

  Files.prototype.bulk_create_file = function(deps) {
    var dep, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = deps.length; _i < _len; _i++) {
      dep = deps[_i];
      _results.push(this.create_file(dep));
    }
    return _results;
  };

  Files.prototype.refresh_dependents = function(dependents) {
    var dependent, file, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = dependents.length; _i < _len; _i++) {
      dependent = dependents[_i];
      file = _.find(this.files, {
        filepath: dependent.filepath
      });
      if (file != null) {
        _results.push(file.refresh());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Files.prototype.watch_file = function(filepath) {
    var dir, watcher,
      _this = this;
    dir = path.dirname(filepath);
    if (this.watchers_foreing[dir] == null) {
      this.watchers_foreing[dir] = true;
      this.watchers.push(watcher = fsu.watch(dir));
      watcher.on('create', function(file) {
        return _this.onfschange('create', file, true);
      });
      watcher.on('change', function(file) {
        return _this.onfschange('change', file, true);
      });
      return watcher.on('delete', function(file) {
        return _this.onfschange('delete', file, true);
      });
    }
  };

  Files.prototype.watch_inputs = function() {
    var dirpath, watcher, _i, _len, _ref, _results,
      _this = this;
    _ref = config.input;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dirpath = _ref[_i];
      this.watchers.push(watcher = fsu.watch(dirpath, exts));
      watcher.on('create', function(file) {
        return _this.onfschange('create', file);
      });
      watcher.on('change', function(file) {
        return _this.onfschange('change', file);
      });
      _results.push(watcher.on('delete', function(file) {
        return _this.onfschange('delete', file);
      }));
    }
    return _results;
  };

  Files.prototype.close_watchers = function(preserve_outsiders) {
    var watcher, _i, _len, _ref, _ref1, _results;
    _ref = this.watchers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      watcher = _ref[_i];
      if (preserve_outsiders != null) {
        if (_ref1 = watcher.root, __indexOf.call(this.watchers_foreing, _ref1) >= 0) {
          continue;
        }
        _results.push(watcher.close());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Files.prototype.onfschange = function(action, file, foreign) {
    var location, msg, type, _i, _len, _ref;
    location = file.location, type = file.type;
    if (type === "dir" && action === "create") {
      return;
    }
    switch (action) {
      case "create":
        if (foreign) {
          _ref = this.files;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            this.foreign_caller = file;
            file.scan_deps();
          }
          this.foreign_caller = null;
          return;
        }
        file = this.create_file(location);
        log_created(location);
        return this.compile(file);
      case "delete":
        file = this.delete_file(location);
        if (file) {
          log_deleted(location);
          return this.compile(file);
        }
        break;
      case "change":
        file = _.find(this.files, {
          filepath: location
        });
        if (file === null) {
          msg = "Change file is apparently null, it shouldn't happened.\n";
          msg += "Please report this at the repo issues section.";
          warn(msg);
        } else {
          log_changed(location);
        }
        file.refresh();
        return this.compile(file);
    }
  };

  Files.prototype.compile = function(file) {
    switch (file.output) {
      case 'js':
        return compiler.build_js(true);
      case 'css':
        return compiler.build_css(true);
    }
  };

  return Files;

})());

/*
//@ sourceMappingURL=files.map
*/
