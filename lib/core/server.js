// Generated by CoffeeScript 1.6.3
(function() {
  var Cli, config, connect, dirs, fs, io, path, refresher, sourcemaps;

  path = require('path');

  fs = require('fs');

  connect = require('connect');

  io = require('socket.io');

  dirs = require('../utils/dirs');

  config = require('../utils/config');

  sourcemaps = require('../utils/sourcemaps');

  Cli = require('../cli');

  refresher = null;

  module.exports = function() {
    var address, argv, cli, index, port, root, source_map_reg, _ref;
    argv = (cli = new Cli).argv;
    _ref = config.server, root = _ref.root, port = _ref.port;
    index = path.join(root, 'index.html');
    source_map_reg = /\/__source_maps/;
    connect().use(connect["static"](root)).use(function(req, res) {
      var file, souce_map_path;
      if (source_map_reg.test(req.url)) {
        file = req.url.replace('__source_maps/', '');
        if (file === '/map') {
          return res.end(sourcemaps.get_assembled(), 'utf-8');
        } else {
          souce_map_path = path.join(dirs.pwd, file);
          return res.end(fs.readFileSync(souce_map_path, 'utf-8'));
        }
      } else {
        if (~(req.url.indexOf('.'))) {
          res.statusCode = 404;
          return res.end('File not found: ' + req.url);
        } else {
          return res.end(fs.readFileSync(index, 'utf-8'));
        }
      }
    }).listen(port);
    address = 'http://localhost:' + port;
    console.log("â™«  " + address);
    if (!argv.r) {
      return refresher = io.listen(53211, {
        'log level': 0
      });
    }
  };

  module.exports.reload = function(type) {
    var css_output;
    if (refresher == null) {
      return;
    }
    css_output = path.basename(config.output.css);
    return refresher.sockets.emit('refresh', {
      type: type,
      css_output: css_output
    });
  };

}).call(this);

/*
//@ sourceMappingURL=server.map
*/
