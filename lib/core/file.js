// Generated by CoffeeScript 1.6.3
var File, MicroEvent, cli, debug, dirs, error, fs, info, path, plugins, prefix, scan, sufix, warn, _, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

_ = require('lodash');

cli = require('../cli');

dirs = require('../utils/dirs');

plugins = require('../utils/plugins');

scan = require('../scanner/scan');

MicroEvent = require('../event/microevent');

_ref = require('../utils/logger')('core/file'), error = _ref.error, warn = _ref.warn, info = _ref.info, debug = _ref.debug;

prefix = "require.register('~path', function(require, module, exports){";

sufix = "}, ~deps);";

module.exports = File = (function(_super) {
  var argv;

  __extends(File, _super);

  argv = cli.argv();

  File.prototype.raw = null;

  File.prototype.filepath = null;

  File.prototype.relativepath = null;

  File.prototype.id = null;

  File.prototype.type = null;

  File.prototype.output = null;

  File.prototype.compiled = null;

  File.prototype.source_map = null;

  File.prototype.source_map_offset = null;

  File.prototype.dependents = null;

  File.prototype.dependencies = null;

  File.prototype.aliases = null;

  File.prototype.is_partial = false;

  File.prototype.compiler = null;

  function File(filepath) {
    var _ref1;
    this.filepath = filepath;
    this.relativepath = dirs.relative(this.filepath);
    this.compiler = this.get_compiler();
    _ref1 = this.compiler, this.type = _ref1.type, this.output = _ref1.output;
    this.is_partial = this.compiler.partials === true && this.compiler.is_partial(this.filepath);
  }

  File.prototype.init = function() {
    return this.refresh();
  };

  File.prototype.refresh = function() {
    var _this = this;
    this.raw = fs.readFileSync(this.filepath, "utf-8");
    return this.compile(function() {
      _this.scan_deps();
      _this.make_aliases();
      _this.wrap();
      return _this.emit('refresh:dependents', _this.dependents);
    });
  };

  File.prototype.compile = function(done) {
    var _this = this;
    if (this.is_partial) {
      return done();
    }
    return this.compiler.compile(this.filepath, this.raw, !argv.release, function(err) {
      return error(dirs.relative(_this.filepath, '\n', err));
    }, function(compiled, source_map) {
      _this.compiled = compiled;
      _this.source_map = source_map;
      return done();
    });
  };

  File.prototype.wrap = function() {
    var id;
    if (this.output === 'css') {
      this.wrapped = this.compiled;
    }
    if (this.output === 'js') {
      id = this.relativepath.replace(this.compiler.ext, '');
      this.wrapped = prefix.replace('~path', id);
      this.wrapped += "\n";
      this.wrapped += this.compiled;
      this.wrapped += "\n";
      return this.wrapped += sufix.replace('~deps', JSON.stringify(this.aliases));
    }
  };

  File.prototype.scan_deps = function() {
    var id, location;
    if (this.type === 'script') {
      this.dependents = [];
      this.dependencies = scan.dependencies(this.filepath, this.compiled);
      return this.emit('new:dependencies', (function() {
        var _ref1, _results;
        _ref1 = this.dependencies;
        _results = [];
        for (id in _ref1) {
          location = _ref1[id];
          _results.push(location);
        }
        return _results;
      }).call(this));
    } else if (this.type === 'template' || this.type === 'style') {
      this.dependencies = {};
      if (!this.is_partial) {
        return this.dependents = [];
      }
      return this.dependents = scan.dependents(this, this.filepath, this.compiled);
    }
  };

  File.prototype.make_aliases = function() {
    var depath, id, _ref1, _results;
    this.aliases = {};
    _ref1 = this.dependencies;
    _results = [];
    for (id in _ref1) {
      depath = _ref1[id];
      if (depath != null) {
        _results.push(this.aliases[id] = dirs.relative(depath).replace(/\.[^\.]+$/, ''));
      }
    }
    return _results;
  };

  File.prototype.get_compiler = function() {
    var plugin, _i, _len;
    for (_i = 0, _len = plugins.length; _i < _len; _i++) {
      plugin = plugins[_i];
      if (plugin.ext.test(this.filepath)) {
        return plugin;
      }
    }
  };

  return File;

})(MicroEvent);

/*
//@ sourceMappingURL=file.map
*/
