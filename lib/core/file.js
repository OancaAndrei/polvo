// Generated by CoffeeScript 1.10.0
(function() {
  var File, MicroEvent, _, argv, debug, dirs, error, fs, info, path, plugins, prefix, ref, scan, sufix, upath, warn,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fs = require('fs');

  path = require('path');

  upath = require('upath');

  _ = require('lodash');

  dirs = require('../utils/dirs');

  plugins = require('../utils/plugins');

  scan = require('../scanner/scan');

  MicroEvent = require('../event/microevent');

  argv = require('../cli').argv;

  ref = require('../utils/logger')('core/file'), error = ref.error, warn = ref.warn, info = ref.info, debug = ref.debug;

  prefix = "require.register('~path', function(require, module, exports){";

  sufix = "}, ~deps);";

  module.exports = File = (function(superClass) {
    extend(File, superClass);

    File.prototype.raw = null;

    File.prototype.filepath = null;

    File.prototype.relativepath = null;

    File.prototype.id = null;

    File.prototype.type = null;

    File.prototype.output = null;

    File.prototype.compiled = null;

    File.prototype.source_map = null;

    File.prototype.source_map_offset = null;

    File.prototype.dependents = null;

    File.prototype.dependencies = null;

    File.prototype.aliases = null;

    File.prototype.is_partial = false;

    File.prototype.compiler = null;

    function File(filepath) {
      var ref1;
      this.filepath = filepath;
      this.relativepath = dirs.relative(this.filepath);
      this.compiler = this.get_compiler();
      ref1 = this.compiler, this.type = ref1.type, this.output = ref1.output;
      this.is_partial = this.compiler.partials === true && this.compiler.is_partial(this.filepath);
    }

    File.prototype.init = function() {
      return this.refresh();
    };

    File.prototype.refresh = function() {
      this.raw = fs.readFileSync(this.filepath, "utf-8");
      this.parse_conditionals();
      return this.compile((function(_this) {
        return function() {
          _this.scan_deps();
          _this.make_aliases();
          _this.wrap();
          return _this.emit('refresh:dependents', _this.dependents);
        };
      })(this));
    };

    File.prototype.compile = function(done) {
      if (this.is_partial) {
        return done();
      }
      return this.compiler.compile(this.filepath, this.raw, !argv.release, (function(_this) {
        return function(err) {
          return error(dirs.relative(_this.filepath), '-', err);
        };
      })(this), (function(_this) {
        return function(compiled, source_map) {
          _this.compiled = compiled;
          _this.source_map = source_map;
          return done();
        };
      })(this));
    };

    File.prototype.parse_conditionals = function() {
      var after, before, buffer, copy, reg, res;
      reg = /^.+polvo:if([\s\S]+?)polvo:fi.*$/gm;
      buffer = [];
      copy = this.raw;
      while ((res = reg.exec(this.raw))) {
        before = res[0];
        after = this.parse_conditional_block(before);
        copy = copy.replace(before, after);
      }
      return this.raw = copy;
    };

    File.prototype.parse_conditional_block = function(block) {
      var buffer, capturing, cond, i, key, len, line, mode, passed, ref1, ref2, value;
      buffer = '';
      passed = 0;
      capturing = false;
      ref1 = block.split('\n');
      for (i = 0, len = ref1.length; i < len; i++) {
        line = ref1[i];
        if (/polvo:(if|elif)/.test(line)) {
          cond = line.match(/(\w+)\s*(\!?=)\s*(\w+)/);
          ref2 = cond.slice(1), key = ref2[0], mode = ref2[1], value = ref2[2];
          if (mode === '=') {
            capturing = process.env[key] === value;
          } else if (mode === '!=') {
            capturing = process.env[key] !== value;
          }
          if (capturing) {
            passed++;
          }
          continue;
        } else if (/polvo:else/.test(line)) {
          capturing = passed === 0;
          continue;
        } else if (/polvo:fi/.test(line)) {
          return buffer;
        } else if (capturing) {
          buffer += line + "\n";
        }
      }
    };

    File.prototype.wrap = function() {
      var id;
      if (this.output === 'css') {
        this.wrapped = this.compiled;
      }
      if (this.output === 'js') {
        id = this.relativepath.replace(this.compiler.ext, '');
        this.wrapped = prefix.replace('~path', id);
        this.wrapped += "\n";
        this.wrapped += this.compiled;
        this.wrapped += "\n";
        return this.wrapped += sufix.replace('~deps', JSON.stringify(this.aliases));
      }
    };

    File.prototype.scan_deps = function() {
      var id, location;
      if (this.type === 'script') {
        this.dependents = [];
        this.dependencies = scan.dependencies(this.filepath, this.compiled);
        return this.emit('new:dependencies', (function() {
          var ref1, results;
          ref1 = this.dependencies;
          results = [];
          for (id in ref1) {
            location = ref1[id];
            results.push(location);
          }
          return results;
        }).call(this));
      } else if (this.type === 'template' || this.type === 'style') {
        this.dependencies = {};
        if (!this.is_partial) {
          return this.dependents = [];
        }
        return this.dependents = scan.dependents(this, this.filepath, this.compiled);
      }
    };

    File.prototype.make_aliases = function() {
      var depath, id, ref1, results;
      this.aliases = {};
      ref1 = this.dependencies;
      results = [];
      for (id in ref1) {
        depath = ref1[id];
        if (depath != null) {
          results.push(this.aliases[id] = dirs.relative(depath).replace(/\.[^\.]+$/, ''));
        }
      }
      return results;
    };

    File.prototype.get_compiler = function() {
      var i, len, plugin;
      for (i = 0, len = plugins.length; i < len; i++) {
        plugin = plugins[i];
        if (plugin.ext.test(this.filepath)) {
          return plugin;
        }
      }
    };

    return File;

  })(MicroEvent);

}).call(this);
