// Generated by CoffeeScript 1.6.3
(function() {
  var File, MicroEvent, dirs, fs, path, plugins, prefix, scan, sufix,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  dirs = require('../utils/dirs');

  plugins = require('../utils/plugins');

  scan = require('../scanner/scan');

  MicroEvent = require('../event/microevent');

  prefix = "require.register('~path', function(exports, require, module){";

  sufix = "}, ~deps);";

  module.exports = File = (function(_super) {
    __extends(File, _super);

    File.prototype.raw = null;

    File.prototype.filepath = null;

    File.prototype.relativepath = null;

    File.prototype.id = null;

    File.prototype.type = null;

    File.prototype.deps = null;

    File.prototype.aliases = null;

    File.prototype.uncompiled = null;

    File.prototype.compiled = null;

    File.prototype.map = null;

    File.prototype.compiled = null;

    File.prototype.src_map = null;

    File.prototype.compiler = null;

    function File(filepath) {
      this.filepath = filepath;
      this.relativepath = dirs.relative(this.filepath);
      this.compiler = this.get_compiler();
      this.type = this.compiler.type;
    }

    File.prototype.init = function() {
      return this.refresh();
    };

    File.prototype.refresh = function() {
      var _this = this;
      this.raw = fs.readFileSync(this.filepath, "utf-8");
      return this.compile(function() {
        _this.scan_deps();
        _this.make_aliases();
        return _this.wrap();
      });
    };

    File.prototype.compile = function(done) {
      var _this = this;
      return this.compiler.compile(this.filepath, this.raw, function(compiled, map) {
        _this.compiled = compiled;
        _this.map = map;
        return typeof done === "function" ? done(_this) : void 0;
      });
    };

    File.prototype.wrap = function() {
      var id;
      if (this.type === 'css') {
        this.wrapped = this.compiled;
      }
      if (this.type === 'js') {
        id = this.relativepath.replace(this.compiler.ext, '');
        this.wrapped = prefix.replace('~path', id);
        this.wrapped += "\n";
        this.wrapped += this.compiled;
        this.wrapped += "\n";
        return this.wrapped += sufix.replace('~deps', JSON.stringify(this.aliases));
      }
    };

    File.prototype.scan_deps = function() {
      var id, location;
      this.deps = scan(this.filepath, this.compiled);
      return this.emit('deps', (function() {
        var _ref, _results;
        _ref = this.deps;
        _results = [];
        for (id in _ref) {
          location = _ref[id];
          _results.push(location);
        }
        return _results;
      }).call(this));
    };

    File.prototype.make_aliases = function() {
      var depath, id, _ref, _results;
      this.aliases = {};
      _ref = this.deps;
      _results = [];
      for (id in _ref) {
        depath = _ref[id];
        _results.push(this.aliases[id] = dirs.relative(depath).replace(/\.[^\.]+$/, ''));
      }
      return _results;
    };

    File.prototype.get_compiler = function() {
      var plugin, _i, _len;
      for (_i = 0, _len = plugins.length; _i < _len; _i++) {
        plugin = plugins[_i];
        if (plugin.ext.test(this.filepath)) {
          return plugin;
        }
      }
    };

    return File;

  })(MicroEvent);

}).call(this);

/*
//@ sourceMappingURL=file.map
*/
