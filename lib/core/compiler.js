// Generated by CoffeeScript 1.6.3
(function() {
  var build, compilers, config, dirs, files, filesize, fs, minify, prefix, sufix, _;

  _ = require('lodash');

  fs = require('fs');

  filesize = require('filesize');

  files = require('./files');

  dirs = require('../utils/dirs');

  config = require('../utils/config');

  minify = require('../utils/minify');

  prefix = ";(function(){\nfunction require(path, parent){\n  // console.log('::: require', path, parent);\n\n  if(parent)\n    path = require.mods[parent].aliases[path]\n  \n  var mod;\n  if(!(mod = require.mods[path]).exports)\n    mod.call(this, (mod.exports = {}), require.local(path), mod);\n\n  return mod.exports;\n}\n\nrequire.mods = {}\n\nrequire.local = function( path ){\n  return function( id ) { return require( id, path ); }\n}\n\nrequire.register = function(path, mod, aliases){\n  // console.log('::: registered', path);\n  require.mods[path] = mod;\n  mod.aliases = aliases;\n}\n";

  sufix = "})()";

  compilers = {};

  build = exports.build = function() {
    compilers = {};
    exports.build_js(true);
    return exports.build_css(true);
  };

  exports.minify = function() {
    var uncompressed;
    exports.build_js();
    exports.build_css();
    uncompressed = fs.readFileSync(config.output.js);
    return fs.writeFileSync(config.output.js, minify.js(uncompressed.toString()));
  };

  exports.build_js = function(notify) {
    var all, buffer, comp, comp_name, each, helper, helpers, k, merged, v, _i, _len;
    files.files = _.sortBy(files.files, 'filepath');
    all = _.filter(files.files, {
      type: 'js'
    });
    helpers = {};
    merged = [];
    for (_i = 0, _len = all.length; _i < _len; _i++) {
      each = all[_i];
      merged.push(each.wrapped);
      comp = each.compiler;
      comp_name = comp.name;
      if ((helpers[comp_name] != null) && ((helper = typeof comp.fetch_helpers === "function" ? comp.fetch_helpers() : void 0) != null)) {
        helpers[comp_name] || (helpers[comp_name] = helper);
      }
    }
    helpers = (function() {
      var _results;
      _results = [];
      for (k in helpers) {
        v = helpers[k];
        _results.push(v);
      }
      return _results;
    })();
    merged = merged.join('\n');
    buffer = prefix;
    buffer += "\n";
    buffer += helpers + merged;
    buffer += "\n";
    buffer += "require('" + config.boot + "');";
    buffer += "\n";
    buffer += sufix;
    fs.writeFileSync(config.output.js, buffer);
    if (notify) {
      return exports.notify_js();
    }
  };

  exports.build_css = function(notify) {
    var all, each, merged;
    files.files = _.sortBy(files.files, 'filepath');
    all = _.filter(files.files, {
      type: 'css'
    });
    merged = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = all.length; _i < _len; _i++) {
        each = all[_i];
        _results.push(each.compiled);
      }
      return _results;
    })()).join('\n');
    fs.writeFileSync(config.output.css, merged);
    if (notify) {
      return exports.notify_css();
    }
  };

  exports.notify_css = function() {
    var relative;
    relative = dirs.relative(config.output.css);
    return console.log(("✓ " + relative).cyan);
  };

  exports.notify_js = function() {
    var fsize, relative;
    fsize = filesize((fs.statSync(config.output.js)).size);
    relative = dirs.relative(config.output.js);
    return console.log(("✓ " + relative + " (" + fsize + ")").cyan);
  };

}).call(this);

/*
//@ sourceMappingURL=compiler.map
*/
