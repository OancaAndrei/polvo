// Generated by CoffeeScript 1.6.3
(function() {
  var build, compilers, config, dirs, files, filesize, fs, minify, prefix, sufix, _;

  _ = require('lodash');

  fs = require('fs');

  filesize = require('filesize');

  files = require('./files');

  dirs = require('../utils/dirs');

  config = require('../utils/config');

  minify = require('../utils/minify');

  prefix = ";(function(){\nfunction require(path, parent){\n  var m, realpath;\n\n  if(parent)\n    realpath = require.mods[parent].aliases[path];\n  else\n    realpath = path;\n\n  if(!realpath)\n    realpath = require.map( path );\n  \n  if(!(m = require.mods[realpath]))\n  {\n    console.error('Module not found: ', path);\n    return null\n  }\n  \n  if(!m.init)\n  {\n    m.factory.call(this, require.local(realpath), m.module, m.module.exports);\n    m.init = true;\n  }\n\n  return m.module.exports;\n}\n\nrequire.mods = {}\n\nrequire.local = function( path ){\n  return function( id ) { return require( id, path ); }\n}\n\nrequire.register = function(path, mod, aliases){\n  require.mods[path] = {\n    factory: mod,\n    aliases: aliases,\n    module: {exports:{}}\n  };\n}\n\nrequire.maps = " + (JSON.stringify(config.mappings)) + ";\nrequire.map = function(path) {\n  for(var map in require.maps)\n    if(path.indexOf(map) == 0)\n      return require.maps[map] + path;\n  return null;\n}";

  sufix = '})()';

  compilers = {};

  build = exports.build = function() {
    compilers = {};
    exports.build_js(true);
    return exports.build_css(true);
  };

  exports.release = function() {
    var uncompressed;
    exports.build_js();
    exports.build_css();
    if (config.minify.js) {
      uncompressed = fs.readFileSync(config.output.js);
      fs.writeFileSync(config.output.js, minify.js(uncompressed.toString()));
      exports.notify_js();
    }
    if (config.minify.css) {
      uncompressed = fs.readFileSync(config.output.css);
      fs.writeFileSync(config.output.css, minify.css(uncompressed.toString()));
      return exports.notify_css();
    }
  };

  exports.build_js = function(notify) {
    var all, buffer, comp, comp_name, each, helper, helpers, k, merged, v, _i, _len;
    files.files = _.sortBy(files.files, 'filepath');
    all = _.filter(files.files, {
      output: 'js'
    });
    helpers = {};
    merged = [];
    for (_i = 0, _len = all.length; _i < _len; _i++) {
      each = all[_i];
      if (each.is_partial) {
        continue;
      }
      merged.push(each.wrapped);
      comp = each.compiler;
      comp_name = comp.name;
      if ((helpers[comp_name] == null) && ((helper = typeof comp.fetch_helpers === "function" ? comp.fetch_helpers() : void 0) != null)) {
        helpers[comp_name] || (helpers[comp_name] = helper);
      }
    }
    helpers = (function() {
      var _results;
      _results = [];
      for (k in helpers) {
        v = helpers[k];
        _results.push(v);
      }
      return _results;
    })();
    merged = merged.join('\n');
    buffer = '// POLVO :: HELPERS\n';
    buffer += helpers;
    buffer += "\n// POLVO :: LOADER\n";
    buffer += prefix;
    buffer += "\n// POLVO :: MERGED FILES\n";
    buffer += merged;
    buffer += "\n// POLVO :: INITIALIZER\n";
    buffer += "require('" + config.boot + "');";
    buffer += "\n";
    buffer += sufix;
    fs.writeFileSync(config.output.js, buffer);
    if (notify) {
      return exports.notify_js();
    }
  };

  exports.build_css = function(notify) {
    var all, each, merged, _i, _len;
    files.files = _.sortBy(files.files, 'filepath');
    all = _.filter(files.files, {
      output: 'css'
    });
    merged = [];
    for (_i = 0, _len = all.length; _i < _len; _i++) {
      each = all[_i];
      if (each.is_partial) {
        continue;
      }
      merged.push(each.compiled);
    }
    merged = merged.join('\n');
    fs.writeFileSync(config.output.css, merged);
    if (notify) {
      return exports.notify_css();
    }
  };

  exports.notify_css = function() {
    var fsize, relative;
    fsize = filesize((fs.statSync(config.output.css)).size);
    relative = dirs.relative(config.output.css);
    return console.log(("✓ " + relative + " (" + fsize + ")").cyan);
  };

  exports.notify_js = function() {
    var fsize, relative;
    fsize = filesize((fs.statSync(config.output.js)).size);
    relative = dirs.relative(config.output.js);
    return console.log(("✓ " + relative + " (" + fsize + ")").cyan);
  };

}).call(this);

/*
//@ sourceMappingURL=compiler.map
*/
