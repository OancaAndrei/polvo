// Generated by CoffeeScript 1.6.3
var argv, auto_reload, cli, compilers, config, debug, dirs, error, files, filesize, fs, info, io_path, loader, loader_path, log_compiled, logger, minify, path, prefix, reloader_path, server, source_maps_header, sourcemaps, sufix, warn, _;

_ = require('lodash');

fs = require('fs');

path = require('path');

filesize = require('filesize');

files = require('./files');

server = require('./server');

cli = require('../cli');

dirs = require('../utils/dirs');

config = require('../utils/config').parse();

minify = require('../utils/minify');

sourcemaps = require('../utils/sourcemaps');

logger = require('../utils/logger')('core/compiler');

argv = cli.argv();

error = logger.error, warn = logger.warn, info = logger.info, debug = logger.debug;

log_compiled = logger.file.compiled;

prefix = ";(function(){";

loader_path = path.join(dirs.root(), 'src', 'core', 'helpers', 'loader.js');

loader = fs.readFileSync(loader_path, 'utf-8');

loader = loader.replace('~VIRTUAL', JSON.stringify(config.virtual));

io_path = path.join(dirs.root(), 'node_modules', 'socket.io', 'node_modules');

io_path = path.join(io_path, 'socket.io-client', 'dist', 'socket.io.js');

reloader_path = loader_path.replace('loader.js', 'reloader.js');

auto_reload = fs.readFileSync(io_path, 'utf-8');

auto_reload += fs.readFileSync(reloader_path, 'utf-8');

source_maps_header = "/*\n//@ sourceMappingURL=data:application/json;charset=utf-8;base64,~MAP\n*/";

sufix = '})()';

compilers = {};

exports.build = function() {
  compilers = {};
  exports.build_js(true);
  return exports.build_css(true);
};

exports.release = function() {
  var uncompressed;
  exports.build_js();
  exports.build_css();
  if (config.minify.js) {
    uncompressed = fs.readFileSync(config.output.js);
    fs.writeFileSync(config.output.js, minify.js(uncompressed.toString()));
  }
  if (config.minify.css) {
    uncompressed = fs.readFileSync(config.output.css);
    fs.writeFileSync(config.output.css, minify.css(uncompressed.toString()));
  }
  exports.notify_js();
  return exports.notify_css();
};

exports.build_js = function(notify) {
  var all, buffer, comp, comp_name, each, helper, helpers, js, k, linesnum, merged, offset, start, v, _i, _j, _len, _len1;
  files.files = _.sortBy(files.files, 'filepath');
  all = _.filter(files.files, {
    output: 'js'
  });
  if (!all.length) {
    return;
  }
  if (config.output.js == null) {
    error('JS not saved, you need to set the js output in your config file');
    return;
  }
  helpers = {};
  merged = [];
  offset = 0;
  for (_i = 0, _len = all.length; _i < _len; _i++) {
    each = all[_i];
    if (each.is_partial) {
      continue;
    }
    js = each.wrapped;
    linesnum = js.split('\n').length;
    merged.push(js);
    each.source_map_offset = offset;
    offset += linesnum;
    comp = each.compiler;
    comp_name = comp.name;
    if ((helpers[comp_name] == null) && ((helper = typeof comp.fetch_helpers === "function" ? comp.fetch_helpers() : void 0) != null)) {
      helpers[comp_name] || (helpers[comp_name] = helper);
    }
  }
  helpers = (function() {
    var _results;
    _results = [];
    for (k in helpers) {
      v = helpers[k];
      _results.push(v);
    }
    return _results;
  })();
  merged = merged.join('\n');
  buffer = '';
  if (argv.server && !argv.release && argv.autoreload !== false) {
    buffer += "\n// POLVO :: AUTORELOAD\n";
    buffer += auto_reload;
  }
  buffer += prefix;
  buffer += '\n// POLVO :: HELPERS\n';
  buffer += helpers;
  buffer += "\n// POLVO :: LOADER\n";
  buffer += loader;
  buffer += "\n// POLVO :: MERGED FILES\n";
  start = buffer.split('\n').length;
  for (_j = 0, _len1 = all.length; _j < _len1; _j++) {
    each = all[_j];
    each.source_map_offset += start;
  }
  sourcemaps.assemble(all);
  buffer += merged;
  buffer += "\n// POLVO :: INITIALIZER\n";
  buffer += "require('" + config.boot + "');";
  buffer += "\n";
  buffer += source_maps_header.replace('~MAP', sourcemaps.get_assembled_64());
  buffer += sufix;
  fs.writeFileSync(config.output.js, buffer);
  server.reload('js');
  if (notify) {
    return exports.notify_js();
  }
};

exports.build_css = function(notify) {
  var all, each, merged, _i, _len;
  files.files = _.sortBy(files.files, 'filepath');
  all = _.filter(files.files, {
    output: 'css'
  });
  if (!all.length) {
    return;
  }
  if (config.output.css == null) {
    error('CSS not saved, you need to set the css output in your config file');
    return;
  }
  merged = [];
  for (_i = 0, _len = all.length; _i < _len; _i++) {
    each = all[_i];
    if (each.is_partial) {
      continue;
    }
    merged.push(each.compiled);
  }
  merged = merged.join('\n');
  fs.writeFileSync(config.output.css, merged);
  server.reload('css');
  if (notify) {
    return exports.notify_css();
  }
};

exports.notify_css = function() {
  var fsize;
  fsize = filesize((fs.statSync(config.output.css)).size);
  return log_compiled("" + config.output.css + " (" + fsize + ")");
};

exports.notify_js = function() {
  var fsize;
  fsize = filesize((fs.statSync(config.output.js)).size);
  return log_compiled("" + config.output.js + " (" + fsize + ")");
};

/*
//@ sourceMappingURL=compiler.map
*/
